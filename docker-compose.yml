version: "3"

services:
  database:
    image: postgres
    container_name: sonic_db
    restart: always
    env_file:
      - .env
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready", "-U", "${PGUSER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      app_network:
        ipv4_address: 10.1.0.10
    volumes:
      - db_data:/var/lib/postgresql/data

  api:
    build:
      context: .
    container_name: sonic_api
    restart: always
    env_file:
      - .env
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://api:${API_PORT}/health/check || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    volumes:
      - ./:/home/node/sonic
    networks:
      app_network:
        ipv4_address: 10.1.0.11
    depends_on:
      database:
        condition: "service_healthy"
        restart: true

  portainer:
    image: portainer/portainer-ce:alpine
    restart: always
    container_name: sonic_portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:9000 || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      app_network:
        ipv4_address: 10.1.0.12

  proxy:
    image: nginx
    container_name: sonic_proxy
    volumes:
      - ./infra/nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template
    ports:
      - "10.1.0.1:80:${NGINX_API_PORT}"
      - "10.1.0.1:9000:${NGINX_PORTAINER_PORT}"
    env_file:
      - .env
    networks:
      app_network:
        ipv4_address: 10.1.0.13
    healthcheck:
      test: ["CMD-SHELL", "service nginx status"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 15s
    depends_on:
      database:
        condition: "service_healthy"
        restart: true
      api:
        condition: "service_healthy"
        restart: true
      portainer:
        condition: "service_healthy"
        restart: true

volumes:
  db_data:
  portainer_data:

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.1.0.0/24
          gateway: 10.1.0.1
